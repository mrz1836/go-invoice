// Package executor provides secure command execution functionality for the MCP server.
// It bridges MCP tool requests to CLI command execution with comprehensive security,
// sandboxing, and output processing capabilities.
package executor

import (
	"context"
	"time"
)

// CommandExecutor defines the interface for executing CLI commands securely.
// All operations must support context cancellation and proper error handling.
type CommandExecutor interface {
	// Execute runs a command with the given request parameters.
	Execute(ctx context.Context, req *ExecutionRequest) (*ExecutionResponse, error)

	// ValidateCommand checks if a command is allowed to execute.
	ValidateCommand(ctx context.Context, command string, args []string) error

	// GetAllowedCommands returns the list of allowed commands.
	GetAllowedCommands(ctx context.Context) ([]string, error)
}

// ExecutionRequest represents a request to execute a CLI command.
type ExecutionRequest struct {
	// Command is the base command to execute (e.g., "go-invoice")
	Command string `json:"command"`

	// Args are the command arguments
	Args []string `json:"args"`

	// WorkingDir is the working directory for command execution
	WorkingDir string `json:"workingDir,omitempty"`

	// Environment contains additional environment variables
	Environment map[string]string `json:"environment,omitempty"`

	// Timeout is the maximum execution time (default: 30s)
	Timeout time.Duration `json:"timeout,omitempty"`

	// InputFiles are files that need to be available for the command
	InputFiles []FileReference `json:"inputFiles,omitempty"`

	// ExpectJSON indicates if the command output should be JSON
	ExpectJSON bool `json:"expectJson,omitempty"`

	// ProgressCallback is called for progress updates (optional)
	ProgressCallback ProgressFunc `json:"-"`
}

// ExecutionResponse represents the result of command execution.
type ExecutionResponse struct {
	// ExitCode is the command exit code (0 for success)
	ExitCode int `json:"exitCode"`

	// Stdout contains the standard output
	Stdout string `json:"stdout"`

	// Stderr contains the standard error output
	Stderr string `json:"stderr"`

	// Duration is the execution time
	Duration time.Duration `json:"duration"`

	// OutputFiles are files generated by the command
	OutputFiles []FileReference `json:"outputFiles,omitempty"`

	// Error contains any execution error message
	Error string `json:"error,omitempty"`

	// Metadata contains additional execution information
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// FileReference represents a file used in command execution.
type FileReference struct {
	// Path is the file path (relative to working directory)
	Path string `json:"path"`

	// ContentType is the MIME type of the file
	ContentType string `json:"contentType"`

	// Size is the file size in bytes
	Size int64 `json:"size"`

	// Checksum is the SHA256 checksum of the file
	Checksum string `json:"checksum,omitempty"`

	// IsTemporary indicates if this is a temporary file
	IsTemporary bool `json:"isTemporary,omitempty"`
}

// ProgressFunc is a callback for progress updates during execution.
type ProgressFunc func(progress *ProgressUpdate)

// ProgressUpdate represents a progress update during command execution.
type ProgressUpdate struct {
	// Stage describes the current operation stage
	Stage string `json:"stage"`

	// Percent is the completion percentage (0-100)
	Percent int `json:"percent"`

	// Message provides additional context
	Message string `json:"message"`

	// Current is the current item being processed
	Current int `json:"current,omitempty"`

	// Total is the total number of items
	Total int `json:"total,omitempty"`

	// Timestamp is when this update was generated
	Timestamp time.Time `json:"timestamp"`
}

// CommandValidator validates commands before execution.
type CommandValidator interface {
	// ValidateCommand checks if a command is safe to execute.
	ValidateCommand(ctx context.Context, command string, args []string) error

	// ValidateEnvironment checks if environment variables are safe.
	ValidateEnvironment(ctx context.Context, env map[string]string) error

	// ValidatePath checks if a file path is safe to access.
	ValidatePath(ctx context.Context, path string) error
}

// FileHandler manages file operations for command execution.
type FileHandler interface {
	// PrepareWorkspace creates a secure workspace for command execution.
	PrepareWorkspace(ctx context.Context, files []FileReference) (workDir string, cleanup func(), err error)

	// CollectOutputFiles collects files generated by command execution.
	CollectOutputFiles(ctx context.Context, workDir string, patterns []string) ([]FileReference, error)

	// ValidateFile checks if a file is safe to use.
	ValidateFile(ctx context.Context, path string) error

	// CreateTempFile creates a temporary file in the secure workspace.
	CreateTempFile(ctx context.Context, pattern string, content []byte) (string, error)
}

// OutputParser parses command output into structured data.
type OutputParser interface {
	// ParseJSON parses JSON output from a command.
	ParseJSON(ctx context.Context, output string) (map[string]interface{}, error)

	// ParseTable parses table-formatted output.
	ParseTable(ctx context.Context, output string) ([]map[string]string, error)

	// ParseKeyValue parses key-value formatted output.
	ParseKeyValue(ctx context.Context, output string) (map[string]string, error)

	// ExtractError extracts error information from output.
	ExtractError(ctx context.Context, stdout, stderr string, exitCode int) error
}

// SandboxConfig defines the security sandbox configuration.
type SandboxConfig struct {
	// AllowedCommands lists commands that can be executed
	AllowedCommands []string `json:"allowedCommands"`

	// AllowedPaths lists file system paths that can be accessed
	AllowedPaths []string `json:"allowedPaths"`

	// BlockedPaths lists paths that must not be accessed
	BlockedPaths []string `json:"blockedPaths"`

	// MaxExecutionTime is the maximum allowed execution time
	MaxExecutionTime time.Duration `json:"maxExecutionTime"`

	// MaxOutputSize is the maximum allowed output size in bytes
	MaxOutputSize int64 `json:"maxOutputSize"`

	// MaxFileSize is the maximum allowed file size in bytes
	MaxFileSize int64 `json:"maxFileSize"`

	// EnvironmentWhitelist lists allowed environment variables
	EnvironmentWhitelist []string `json:"environmentWhitelist"`

	// EnableNetworkIsolation prevents network access
	EnableNetworkIsolation bool `json:"enableNetworkIsolation"`

	// ResourceLimits defines CPU and memory limits
	ResourceLimits *ResourceLimits `json:"resourceLimits,omitempty"`
}

// ResourceLimits defines resource usage limits.
type ResourceLimits struct {
	// MaxCPUPercent is the maximum CPU usage percentage
	MaxCPUPercent int `json:"maxCpuPercent"`

	// MaxMemoryMB is the maximum memory usage in megabytes
	MaxMemoryMB int `json:"maxMemoryMb"`

	// MaxProcesses is the maximum number of processes
	MaxProcesses int `json:"maxProcesses"`

	// MaxOpenFiles is the maximum number of open files
	MaxOpenFiles int `json:"maxOpenFiles"`
}

// Logger defines the logging interface used by the executor.
type Logger interface {
	Debug(msg string, keysAndValues ...interface{})
	Info(msg string, keysAndValues ...interface{})
	Warn(msg string, keysAndValues ...interface{})
	Error(msg string, keysAndValues ...interface{})
}
